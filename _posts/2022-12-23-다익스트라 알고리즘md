---
layout: article
title: "[네트워크] 다익트라 알고리즘"
subtitle: "네트워크 기초공부"
date: 2022-12-28 16:05:00 +0900
lastmod: 2022-12-28 17:50:00 +0900
tags: 
  - 네트워크

---
<br><br>
다익트라 알고리즘

<!--more-->  


# 다익스트라 알고리즘?

다익스트라(dijkstra) 알고리즘은 그래프에서 한 정점(노드)에서 다른 정점까지의 최단 경로를 구하는 알고리즘 중 하나이다. 이 과정에서 도착 정점 뿐만 아니라 모든 다른 정점까지 최단 경로로 방문하며 각 정점까지의 최단 경로를 모두 찾게 된다. 매번 최단 경로의 정점을 선택해 탐색을 반복하는 것이다.<br/>

참고로 그래프 알고리즘 중 최소 비용을 구하는 데는 다익스트라 알고리즘 외에도 벨만-포드 알고리즘, 프로이드 워샬 알고리즘 등이 있다.<br/>

# 특징
아래 예시에서 볼 수 있듯이, 다익스트라 알고리즘은 방문하지 않은 노드 중 최단 거리인 노드를 선택하는 과정을 반복한다.<br/>
또한 각 단계마다 탐색 노드로 한 번 선택된 노드는 최단 거리를 갱신하고, 그 뒤에는 더 작은 값으로 다시 갱신되지 않는다.<br/>
도착 노드는 해당 노드를 거쳐 다른 노드로 가는 길을 찾을 필요는 없다.

다익스트라 알고리즘은 가중치가 양수일 때만 사용 가능하다는 중요한 특징이 있다.<br/>

<img width="304" alt="스크린샷 2022-12-26 오후 10 55 23" src="https://user-images.githubusercontent.com/99805929/209556097-136201e5-459b-4ecc-b75f-1038507336ba.png"> <br/>

다음과 같은 상황에서 `1-5` 가 최단경로가 되기 위해서는 `1-2-5` 경로의 k가 반드시 1보다 커야된다. k가 0 미만인 경우에는 `1-2-5`가 최단 경로가 되어버린다 따라서 노드 사이의 간선의 가중치가 양수여야 한다는 조건이 있다.<br/>



# 예시

<img width="627" alt="스크린샷 2022-12-26 오후 6 43 08" src="https://user-images.githubusercontent.com/99805929/209533532-77e8627a-ef2c-4504-bcba-50fd19ac597a.png"><br/>

<img width="647" alt="스크린샷 2022-12-26 오후 6 42 08" src="https://user-images.githubusercontent.com/99805929/209533536-39359944-8323-4e6c-a33f-8091b54fe65e.png"><br/>

1번에서 8번으로 가는 경로를 구하는 예시이고, 다음과 같이 infinite로 초기화 하였다.<br/>

<img width="602" alt="스크린샷 2022-12-26 오후 6 44 56" src="https://user-images.githubusercontent.com/99805929/209533772-c42b0436-7f6e-4cc1-b93c-c12b6e22735d.png"><br/>

1번에서 출발하는 경우 노드 1번은 자기자신이므로 0으로 초기화 된다.<br/>

<img width="637" alt="스크린샷 2022-12-26 오후 6 45 53" src="https://user-images.githubusercontent.com/99805929/209533864-f8b64356-e22c-4b0d-b6e9-47644c1f27f5.png"><br/>

<img width="596" alt="스크린샷 2022-12-26 오후 6 47 13" src="https://user-images.githubusercontent.com/99805929/209534044-dabb4d48-0473-4f11-9de5-f39ed36d0e56.png"><br/>

1번과 연결되어 있는 2, 5번에 대한 값을 기존 값과 비교하여 최소 값으로 업데이트한다.<br/>

<img width="641" alt="스크린샷 2022-12-26 오후 6 49 02" src="https://user-images.githubusercontent.com/99805929/209534281-bb88ea52-00da-4c4c-a87f-c44b24df7b06.png"><br/>

다음 선택노드는 최근 갱신한 테이블에서 방문하지 않은 노드 중 거리 값이 가장 적은 노드를 선택하는데, 여기서는 임의로 2번노드를 선택했다.<br/>

<img width="620" alt="스크린샷 2022-12-26 오후 10 33 42" src="https://user-images.githubusercontent.com/99805929/209554398-01811225-bf35-4d90-8903-d2896d7986b5.png"><br/>

<img width="639" alt="스크린샷 2022-12-26 오후 10 42 08" src="https://user-images.githubusercontent.com/99805929/209555049-7ba5bfaf-8416-4c25-845f-11e1e8131012.png"><br/>

2번 노드는 3번과 5번 노드와 연결되어 있다. 3번노드는 3(1+2)으로 업데이트 되지만, 5번 노드는 최소값이 아니기 때문에 업데이트 되지 않는다.<br/>

<img width="601" alt="스크린샷 2022-12-26 오후 10 44 39" src="https://user-images.githubusercontent.com/99805929/209555310-6d6de051-f189-4c1b-9496-6d4420beec6b.png"><br/>

<img width="633" alt="스크린샷 2022-12-26 오후 10 44 43" src="https://user-images.githubusercontent.com/99805929/209555311-3b102c37-34b6-420c-8a56-cedef3f829bd.png"><br/>

5번 노드는 6번 노드와 연결되어 있으며 최소값(1+1)으로 업데이트 된다.<br/>

3, 6번 노드 중 6번 노드의 값이 최소값 이므로 6번 노드를 선택한다.<br/>

이런식으로 계산 하면 마지막에는 다음과 같이 테이블이 구성되게 된다.<br/>

<img width="637" alt="스크린샷 2022-12-26 오후 10 51 18" src="https://user-images.githubusercontent.com/99805929/209555826-401196b4-5b2e-46eb-a04c-a79489245cc7.png"><br/>

`1-2-3-4-8` 과 `1-5-6-7-8`의 값을 비교해보면 후자의 값이 최소값 임을 알 수있다.



<br/>
<br/>



# Reference

[[알고리즘] 다익스트라(Dijkstra) 알고리즘](https://velog.io/@717lumos/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BCDijkstra-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98)<br/>
[23. 다익스트라 알고리즘](https://m.blog.naver.com/ndb796/221234424646)<br/>
[컴퓨터 네트워크](http://www.kocw.net/home/search/kemView.do?kemId=1312397)
